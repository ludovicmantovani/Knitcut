//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""29ca77e7-5a8f-486d-af97-037da8a13e34"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7cecbf22-58a6-49ee-947a-800f55e9b56c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a6670b77-6096-44ac-8ce9-b05c2319fcb9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickSave"",
                    ""type"": ""Button"",
                    ""id"": ""95dcea50-8535-4c31-b156-fd5c855b899e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickLoad"",
                    ""type"": ""Button"",
                    ""id"": ""39ad0cac-e21c-4190-86ca-5fa1e9b97ed7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Intercation"",
                    ""type"": ""Button"",
                    ""id"": ""9d6bc202-ba0e-407e-8035-a86912b6cffc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""3630e42c-d137-46eb-b4e2-c43d7277b72b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hydrate"",
                    ""type"": ""Button"",
                    ""id"": ""05251346-08ee-4480-8604-8e2e317cd163"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""4d4a2371-3862-4c72-ac46-6b268d9e2350"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecipesInventory"",
                    ""type"": ""Button"",
                    ""id"": ""10a9ac59-73fc-4ebf-bc91-597476884d94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c3af400c-39a6-40ba-a038-a402df32830b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3d6cd6bf-c3f8-433e-a019-91a2811dfcd0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ec662bbb-81d0-4528-8368-e945836f6f85"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""957de0af-0b08-4915-bef5-47bf80c276b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f05d6845-1fb4-412a-8e89-57d729a5259c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3e5ff323-7fda-4004-acfb-b6b5be2959ef"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bd04020-4575-4317-99ac-042d48d8f1fd"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuickSave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b142bebe-4113-4d00-a0d9-7a8419886e3c"",
                    ""path"": ""<Keyboard>/f9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuickLoad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""197452b3-2f9c-4717-8dd8-c36dd8263e9f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Intercation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""854cfd2d-3c52-436b-b492-2841a9ebd248"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1613ca06-324f-41ae-b965-c161703386a3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hydrate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97228064-c35b-45e2-978d-eedf91c5e02e"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""240badb5-96a1-4f65-bf66-05700261e0b6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecipesInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Manual_Save"",
            ""id"": ""cd13c41e-e194-4af8-8acd-20ddb92c8191"",
            ""actions"": [
                {
                    ""name"": ""save_Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""16f9757d-2620-492d-9815-83cafac40075"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa0a2b81-1882-4ca6-82c1-7e925d733e37"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""save_Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MiniGames"",
            ""id"": ""d503e4d5-b276-45db-b850-dda48f9d6031"",
            ""actions"": [
                {
                    ""name"": ""Mouse_Position"",
                    ""type"": ""Value"",
                    ""id"": ""5fae66e7-28ee-4565-be8b-b31012865537"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse_Bouton_0"",
                    ""type"": ""Button"",
                    ""id"": ""b5bf354e-50c6-4d17-a2d3-5698173fb0ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3abf732d-99bd-49a1-966c-a921e6a4e556"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcbe88c7-37b7-4ce7-bfd0-4c87b4b7cd3e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse_Bouton_0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_CameraLook = m_Player.FindAction("CameraLook", throwIfNotFound: true);
        m_Player_QuickSave = m_Player.FindAction("QuickSave", throwIfNotFound: true);
        m_Player_QuickLoad = m_Player.FindAction("QuickLoad", throwIfNotFound: true);
        m_Player_Intercation = m_Player.FindAction("Intercation", throwIfNotFound: true);
        m_Player_Heal = m_Player.FindAction("Heal", throwIfNotFound: true);
        m_Player_Hydrate = m_Player.FindAction("Hydrate", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        m_Player_RecipesInventory = m_Player.FindAction("RecipesInventory", throwIfNotFound: true);
        // Manual_Save
        m_Manual_Save = asset.FindActionMap("Manual_Save", throwIfNotFound: true);
        m_Manual_Save_save_Inventory = m_Manual_Save.FindAction("save_Inventory", throwIfNotFound: true);
        // MiniGames
        m_MiniGames = asset.FindActionMap("MiniGames", throwIfNotFound: true);
        m_MiniGames_Mouse_Position = m_MiniGames.FindAction("Mouse_Position", throwIfNotFound: true);
        m_MiniGames_Mouse_Bouton_0 = m_MiniGames.FindAction("Mouse_Bouton_0", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_CameraLook;
    private readonly InputAction m_Player_QuickSave;
    private readonly InputAction m_Player_QuickLoad;
    private readonly InputAction m_Player_Intercation;
    private readonly InputAction m_Player_Heal;
    private readonly InputAction m_Player_Hydrate;
    private readonly InputAction m_Player_Inventory;
    private readonly InputAction m_Player_RecipesInventory;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @CameraLook => m_Wrapper.m_Player_CameraLook;
        public InputAction @QuickSave => m_Wrapper.m_Player_QuickSave;
        public InputAction @QuickLoad => m_Wrapper.m_Player_QuickLoad;
        public InputAction @Intercation => m_Wrapper.m_Player_Intercation;
        public InputAction @Heal => m_Wrapper.m_Player_Heal;
        public InputAction @Hydrate => m_Wrapper.m_Player_Hydrate;
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        public InputAction @RecipesInventory => m_Wrapper.m_Player_RecipesInventory;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @CameraLook.started += instance.OnCameraLook;
            @CameraLook.performed += instance.OnCameraLook;
            @CameraLook.canceled += instance.OnCameraLook;
            @QuickSave.started += instance.OnQuickSave;
            @QuickSave.performed += instance.OnQuickSave;
            @QuickSave.canceled += instance.OnQuickSave;
            @QuickLoad.started += instance.OnQuickLoad;
            @QuickLoad.performed += instance.OnQuickLoad;
            @QuickLoad.canceled += instance.OnQuickLoad;
            @Intercation.started += instance.OnIntercation;
            @Intercation.performed += instance.OnIntercation;
            @Intercation.canceled += instance.OnIntercation;
            @Heal.started += instance.OnHeal;
            @Heal.performed += instance.OnHeal;
            @Heal.canceled += instance.OnHeal;
            @Hydrate.started += instance.OnHydrate;
            @Hydrate.performed += instance.OnHydrate;
            @Hydrate.canceled += instance.OnHydrate;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @RecipesInventory.started += instance.OnRecipesInventory;
            @RecipesInventory.performed += instance.OnRecipesInventory;
            @RecipesInventory.canceled += instance.OnRecipesInventory;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @CameraLook.started -= instance.OnCameraLook;
            @CameraLook.performed -= instance.OnCameraLook;
            @CameraLook.canceled -= instance.OnCameraLook;
            @QuickSave.started -= instance.OnQuickSave;
            @QuickSave.performed -= instance.OnQuickSave;
            @QuickSave.canceled -= instance.OnQuickSave;
            @QuickLoad.started -= instance.OnQuickLoad;
            @QuickLoad.performed -= instance.OnQuickLoad;
            @QuickLoad.canceled -= instance.OnQuickLoad;
            @Intercation.started -= instance.OnIntercation;
            @Intercation.performed -= instance.OnIntercation;
            @Intercation.canceled -= instance.OnIntercation;
            @Heal.started -= instance.OnHeal;
            @Heal.performed -= instance.OnHeal;
            @Heal.canceled -= instance.OnHeal;
            @Hydrate.started -= instance.OnHydrate;
            @Hydrate.performed -= instance.OnHydrate;
            @Hydrate.canceled -= instance.OnHydrate;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @RecipesInventory.started -= instance.OnRecipesInventory;
            @RecipesInventory.performed -= instance.OnRecipesInventory;
            @RecipesInventory.canceled -= instance.OnRecipesInventory;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Manual_Save
    private readonly InputActionMap m_Manual_Save;
    private List<IManual_SaveActions> m_Manual_SaveActionsCallbackInterfaces = new List<IManual_SaveActions>();
    private readonly InputAction m_Manual_Save_save_Inventory;
    public struct Manual_SaveActions
    {
        private @PlayerControls m_Wrapper;
        public Manual_SaveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @save_Inventory => m_Wrapper.m_Manual_Save_save_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Manual_Save; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Manual_SaveActions set) { return set.Get(); }
        public void AddCallbacks(IManual_SaveActions instance)
        {
            if (instance == null || m_Wrapper.m_Manual_SaveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Manual_SaveActionsCallbackInterfaces.Add(instance);
            @save_Inventory.started += instance.OnSave_Inventory;
            @save_Inventory.performed += instance.OnSave_Inventory;
            @save_Inventory.canceled += instance.OnSave_Inventory;
        }

        private void UnregisterCallbacks(IManual_SaveActions instance)
        {
            @save_Inventory.started -= instance.OnSave_Inventory;
            @save_Inventory.performed -= instance.OnSave_Inventory;
            @save_Inventory.canceled -= instance.OnSave_Inventory;
        }

        public void RemoveCallbacks(IManual_SaveActions instance)
        {
            if (m_Wrapper.m_Manual_SaveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IManual_SaveActions instance)
        {
            foreach (var item in m_Wrapper.m_Manual_SaveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Manual_SaveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Manual_SaveActions @Manual_Save => new Manual_SaveActions(this);

    // MiniGames
    private readonly InputActionMap m_MiniGames;
    private List<IMiniGamesActions> m_MiniGamesActionsCallbackInterfaces = new List<IMiniGamesActions>();
    private readonly InputAction m_MiniGames_Mouse_Position;
    private readonly InputAction m_MiniGames_Mouse_Bouton_0;
    public struct MiniGamesActions
    {
        private @PlayerControls m_Wrapper;
        public MiniGamesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse_Position => m_Wrapper.m_MiniGames_Mouse_Position;
        public InputAction @Mouse_Bouton_0 => m_Wrapper.m_MiniGames_Mouse_Bouton_0;
        public InputActionMap Get() { return m_Wrapper.m_MiniGames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniGamesActions set) { return set.Get(); }
        public void AddCallbacks(IMiniGamesActions instance)
        {
            if (instance == null || m_Wrapper.m_MiniGamesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MiniGamesActionsCallbackInterfaces.Add(instance);
            @Mouse_Position.started += instance.OnMouse_Position;
            @Mouse_Position.performed += instance.OnMouse_Position;
            @Mouse_Position.canceled += instance.OnMouse_Position;
            @Mouse_Bouton_0.started += instance.OnMouse_Bouton_0;
            @Mouse_Bouton_0.performed += instance.OnMouse_Bouton_0;
            @Mouse_Bouton_0.canceled += instance.OnMouse_Bouton_0;
        }

        private void UnregisterCallbacks(IMiniGamesActions instance)
        {
            @Mouse_Position.started -= instance.OnMouse_Position;
            @Mouse_Position.performed -= instance.OnMouse_Position;
            @Mouse_Position.canceled -= instance.OnMouse_Position;
            @Mouse_Bouton_0.started -= instance.OnMouse_Bouton_0;
            @Mouse_Bouton_0.performed -= instance.OnMouse_Bouton_0;
            @Mouse_Bouton_0.canceled -= instance.OnMouse_Bouton_0;
        }

        public void RemoveCallbacks(IMiniGamesActions instance)
        {
            if (m_Wrapper.m_MiniGamesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMiniGamesActions instance)
        {
            foreach (var item in m_Wrapper.m_MiniGamesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MiniGamesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MiniGamesActions @MiniGames => new MiniGamesActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCameraLook(InputAction.CallbackContext context);
        void OnQuickSave(InputAction.CallbackContext context);
        void OnQuickLoad(InputAction.CallbackContext context);
        void OnIntercation(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
        void OnHydrate(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnRecipesInventory(InputAction.CallbackContext context);
    }
    public interface IManual_SaveActions
    {
        void OnSave_Inventory(InputAction.CallbackContext context);
    }
    public interface IMiniGamesActions
    {
        void OnMouse_Position(InputAction.CallbackContext context);
        void OnMouse_Bouton_0(InputAction.CallbackContext context);
    }
}
